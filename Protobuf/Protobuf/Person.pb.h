// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Person.proto

#ifndef PROTOBUF_Person_2eproto__INCLUDED
#define PROTOBUF_Person_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tutorial {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Person_2eproto();
void protobuf_AssignDesc_Person_2eproto();
void protobuf_ShutdownFile_Person_2eproto();

class Person;

// ===================================================================

class Person : public ::google::protobuf::Message {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person& default_instance();

  void Swap(Person* other);

  // implements Message ----------------------------------------------

  Person* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string strName = 1;
  inline bool has_strname() const;
  inline void clear_strname();
  static const int kStrNameFieldNumber = 1;
  inline const ::std::string& strname() const;
  inline void set_strname(const ::std::string& value);
  inline void set_strname(const char* value);
  inline void set_strname(const char* value, size_t size);
  inline ::std::string* mutable_strname();
  inline ::std::string* release_strname();
  inline void set_allocated_strname(::std::string* strname);

  // required int32 nAge = 2;
  inline bool has_nage() const;
  inline void clear_nage();
  static const int kNAgeFieldNumber = 2;
  inline ::google::protobuf::int32 nage() const;
  inline void set_nage(::google::protobuf::int32 value);

  // optional string strEmail = 3;
  inline bool has_stremail() const;
  inline void clear_stremail();
  static const int kStrEmailFieldNumber = 3;
  inline const ::std::string& stremail() const;
  inline void set_stremail(const ::std::string& value);
  inline void set_stremail(const char* value);
  inline void set_stremail(const char* value, size_t size);
  inline ::std::string* mutable_stremail();
  inline ::std::string* release_stremail();
  inline void set_allocated_stremail(::std::string* stremail);

  // @@protoc_insertion_point(class_scope:tutorial.Person)
 private:
  inline void set_has_strname();
  inline void clear_has_strname();
  inline void set_has_nage();
  inline void clear_has_nage();
  inline void set_has_stremail();
  inline void clear_has_stremail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* strname_;
  ::std::string* stremail_;
  ::google::protobuf::int32 nage_;
  friend void  protobuf_AddDesc_Person_2eproto();
  friend void protobuf_AssignDesc_Person_2eproto();
  friend void protobuf_ShutdownFile_Person_2eproto();

  void InitAsDefaultInstance();
  static Person* default_instance_;
};
// ===================================================================


// ===================================================================

// Person

// required string strName = 1;
inline bool Person::has_strname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Person::set_has_strname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Person::clear_has_strname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Person::clear_strname() {
  if (strname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strname_->clear();
  }
  clear_has_strname();
}
inline const ::std::string& Person::strname() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.strName)
  return *strname_;
}
inline void Person::set_strname(const ::std::string& value) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strname_ = new ::std::string;
  }
  strname_->assign(value);
  // @@protoc_insertion_point(field_set:tutorial.Person.strName)
}
inline void Person::set_strname(const char* value) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strname_ = new ::std::string;
  }
  strname_->assign(value);
  // @@protoc_insertion_point(field_set_char:tutorial.Person.strName)
}
inline void Person::set_strname(const char* value, size_t size) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strname_ = new ::std::string;
  }
  strname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tutorial.Person.strName)
}
inline ::std::string* Person::mutable_strname() {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tutorial.Person.strName)
  return strname_;
}
inline ::std::string* Person::release_strname() {
  clear_has_strname();
  if (strname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strname_;
    strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Person::set_allocated_strname(::std::string* strname) {
  if (strname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strname_;
  }
  if (strname) {
    set_has_strname();
    strname_ = strname;
  } else {
    clear_has_strname();
    strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tutorial.Person.strName)
}

// required int32 nAge = 2;
inline bool Person::has_nage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Person::set_has_nage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Person::clear_has_nage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Person::clear_nage() {
  nage_ = 0;
  clear_has_nage();
}
inline ::google::protobuf::int32 Person::nage() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.nAge)
  return nage_;
}
inline void Person::set_nage(::google::protobuf::int32 value) {
  set_has_nage();
  nage_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Person.nAge)
}

// optional string strEmail = 3;
inline bool Person::has_stremail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Person::set_has_stremail() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Person::clear_has_stremail() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Person::clear_stremail() {
  if (stremail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stremail_->clear();
  }
  clear_has_stremail();
}
inline const ::std::string& Person::stremail() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.strEmail)
  return *stremail_;
}
inline void Person::set_stremail(const ::std::string& value) {
  set_has_stremail();
  if (stremail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stremail_ = new ::std::string;
  }
  stremail_->assign(value);
  // @@protoc_insertion_point(field_set:tutorial.Person.strEmail)
}
inline void Person::set_stremail(const char* value) {
  set_has_stremail();
  if (stremail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stremail_ = new ::std::string;
  }
  stremail_->assign(value);
  // @@protoc_insertion_point(field_set_char:tutorial.Person.strEmail)
}
inline void Person::set_stremail(const char* value, size_t size) {
  set_has_stremail();
  if (stremail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stremail_ = new ::std::string;
  }
  stremail_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tutorial.Person.strEmail)
}
inline ::std::string* Person::mutable_stremail() {
  set_has_stremail();
  if (stremail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stremail_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tutorial.Person.strEmail)
  return stremail_;
}
inline ::std::string* Person::release_stremail() {
  clear_has_stremail();
  if (stremail_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stremail_;
    stremail_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Person::set_allocated_stremail(::std::string* stremail) {
  if (stremail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stremail_;
  }
  if (stremail) {
    set_has_stremail();
    stremail_ = stremail;
  } else {
    clear_has_stremail();
    stremail_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tutorial.Person.strEmail)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Person_2eproto__INCLUDED
